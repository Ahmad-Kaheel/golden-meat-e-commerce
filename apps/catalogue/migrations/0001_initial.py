# Generated by Django 4.2 on 2024-08-20 05:42

import catalogue.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('name_ar', models.CharField(max_length=100, null=True, unique=True, verbose_name='Category Name')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('icon', models.ImageField(blank=True, upload_to=catalogue.models.category_image_path)),
                ('is_public', models.BooleanField(db_index=True, default=True, help_text='only puplic category can seen.', verbose_name='Is public')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='catalogue.category', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Country Name')),
                ('name_ar', models.CharField(max_length=100, null=True, verbose_name='Country Name')),
                ('name_en', models.CharField(max_length=100, null=True, verbose_name='Country Name')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('title_ar', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('title_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_ar', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('discount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount (Optional)')),
                ('is_public', models.BooleanField(db_index=True, default=True, help_text='Show this product in search results and catalogue listings.', verbose_name='Is public')),
                ('main_image_url', models.ImageField(blank=True, upload_to=catalogue.models.product_image_path)),
                ('rating', models.FloatField(editable=False, null=True, verbose_name='Rating')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Date updated')),
                ('categories', models.ManyToManyField(related_name='products', to='catalogue.category', verbose_name='Categories')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(blank=True, null=True, verbose_name='Rating')),
                ('review', models.TextField(max_length=250, verbose_name='Review')),
                ('review_ar', models.TextField(max_length=250, null=True, verbose_name='Review')),
                ('review_en', models.TextField(max_length=250, null=True, verbose_name='Review')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply', to='catalogue.review', verbose_name='Parent Review')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='ProductSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predefined_name', models.CharField(choices=[('weight', 'Weight'), ('expiry_date', 'Expiry Date'), ('fat_content', 'Fat Content'), ('other', 'Other')], default='weight', max_length=50, verbose_name='Specification Name')),
                ('predefined_name_ar', models.CharField(choices=[('weight', 'Weight'), ('expiry_date', 'Expiry Date'), ('fat_content', 'Fat Content'), ('other', 'Other')], default='weight', max_length=50, null=True, verbose_name='Specification Name')),
                ('predefined_name_en', models.CharField(choices=[('weight', 'Weight'), ('expiry_date', 'Expiry Date'), ('fat_content', 'Fat Content'), ('other', 'Other')], default='weight', max_length=50, null=True, verbose_name='Specification Name')),
                ('predefined_unit', models.CharField(blank=True, choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('ton', 'Tons'), ('<2_days', 'Less than two days'), ('2-4_days', 'Two to four days'), ('>4_days', 'More than four days'), ('other', 'Other')], max_length=50, null=True, verbose_name='Unit')),
                ('predefined_unit_ar', models.CharField(blank=True, choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('ton', 'Tons'), ('<2_days', 'Less than two days'), ('2-4_days', 'Two to four days'), ('>4_days', 'More than four days'), ('other', 'Other')], max_length=50, null=True, verbose_name='Unit')),
                ('predefined_unit_en', models.CharField(blank=True, choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('ton', 'Tons'), ('<2_days', 'Less than two days'), ('2-4_days', 'Two to four days'), ('>4_days', 'More than four days'), ('other', 'Other')], max_length=50, null=True, verbose_name='Unit')),
                ('custom_name', models.CharField(blank=True, help_text='For example: weight', max_length=100, null=True, verbose_name='Custom Specification Name')),
                ('custom_name_ar', models.CharField(blank=True, help_text='For example: weight', max_length=100, null=True, verbose_name='Custom Specification Name')),
                ('custom_name_en', models.CharField(blank=True, help_text='For example: weight', max_length=100, null=True, verbose_name='Custom Specification Name')),
                ('custom_unit', models.CharField(blank=True, help_text='For example: gram', max_length=50, null=True, verbose_name='Custom Unit')),
                ('custom_unit_ar', models.CharField(blank=True, help_text='For example: gram', max_length=50, null=True, verbose_name='Custom Unit')),
                ('custom_unit_en', models.CharField(blank=True, help_text='For example: gram', max_length=50, null=True, verbose_name='Custom Unit')),
                ('custom_value', models.CharField(blank=True, help_text='For example: 500', max_length=100, null=True, verbose_name='Custom Value')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specifications', to='catalogue.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Specification',
                'verbose_name_plural': 'Product Specifications',
            },
        ),
        migrations.CreateModel(
            name='ProductRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveSmallIntegerField(db_index=True, default=0, help_text='Determines order of the products. A product with a higher value will appear before one with a lower ranking.', verbose_name='Ranking')),
                ('primary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_recommendations', to='catalogue.product', verbose_name='Primary product')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.product', verbose_name='Recommended product')),
            ],
            options={
                'verbose_name': 'Product recommendation',
                'verbose_name_plural': 'Product recomendations',
                'ordering': ['primary', '-ranking'],
                'unique_together': {('primary', 'recommendation')},
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.ImageField(blank=True, upload_to=catalogue.models.product_image_path, verbose_name='Image URL')),
                ('alt_text', models.CharField(max_length=100, verbose_name='Missing Image')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='catalogue.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='recommended_products',
            field=models.ManyToManyField(blank=True, help_text='These are products that are recommended to accompany the main product.', through='catalogue.ProductRecommendation', to='catalogue.product', verbose_name='Recommended products'),
        ),
        migrations.AddField(
            model_name='product',
            name='source_country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='catalogue.country', verbose_name='Source Country'),
        ),
    ]
