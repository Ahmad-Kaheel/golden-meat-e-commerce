openapi: 3.0.3
info:
  title: ecommerce
  version: 1.0.0
  description: ecommerce ecommerce ecommerce ecommerce
paths:
  /account-confirm-email/{key}/:
    post:
      operationId: account_confirm_email_create
      parameters:
      - in: path
        name: key
        schema:
          type: string
          pattern: ^[-:\w]+$
        required: true
      tags:
      - account-confirm-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/login/:
    post:
      operationId: api_login_create
      description: Authenticate users using email and password. Returns access and
        refresh tokens along with user details upon successful authentication.
      summary: User Login
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
              examples:
                SuccessfulLogin:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 1
                      email: user@example.com
                      first_name: John
                      last_name: Doe
                      is_active: true
                  summary: Example Response
          description: Successful authentication. Access and refresh tokens are returned
            along with user details.
        '400':
          description: Bad Request - Invalid credentials provided.
        '401':
          description: Unauthorized - Authentication failed.
  /api/register/:
    post:
      operationId: api_register_create
      description: Register new users using or email and password.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/user/:
    get:
      operationId: api_user_retrieve
      description: Fetch the details of the authenticated user.
      summary: Retrieve User Details
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          description: Unauthorized - Invalid or missing access token.
  /api/user/profile/:
    get:
      operationId: api_user_profile_retrieve
      description: Fetch the profile details of the authenticated user.
      summary: Retrieve User Profile
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '401':
          description: Unauthorized - Invalid or missing access token.
    put:
      operationId: api_user_profile_update
      description: Update the profile information of the authenticated user.
      summary: Update User Profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '400':
          description: Bad Request - Invalid data provided.
        '401':
          description: Unauthorized - Invalid or missing access token.
        '403':
          description: Forbidden - User does not have permission to update this profile.
    patch:
      operationId: api_user_profile_partial_update
      description: Partially update the profile information of the authenticated user.
      summary: Partially Update User Profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '400':
          description: Bad Request - Invalid data provided.
        '401':
          description: Unauthorized - Invalid or missing access token.
        '403':
          description: Forbidden - User does not have permission to update this profile.
  /logout/:
    post:
      operationId: logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - logout
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /password/change/:
    post:
      operationId: password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /password/reset/:
    post:
      operationId: password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /password/reset/confirm/{uidb64}/{token}:
    post:
      operationId: password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /resend-email/:
    post:
      operationId: resend_email_create
      tags:
      - resend-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
components:
  schemas:
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedProfile:
      type: object
      description: Serializer class to serialize the user Profile model
      properties:
        avatar:
          type: string
          format: uri
        bio:
          type: string
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Profile:
      type: object
      description: Serializer class to serialize the user Profile model
      properties:
        avatar:
          type: string
          format: uri
        bio:
          type: string
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    User:
      type: object
      description: Serializer class to seralize User model
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          allOf:
          - $ref: '#/components/schemas/Profile'
          readOnly: true
      required:
      - email
      - id
      - profile
    UserLogin:
      type: object
      description: Serializer to login users with email.
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    UserRegistration:
      type: object
      description: Serializer for registrating new users using email or phone number
        in future.
      properties:
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
          writeOnly: true
        last_name:
          type: string
          writeOnly: true
      required:
      - email
      - first_name
      - last_name
      - password1
      - password2
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
